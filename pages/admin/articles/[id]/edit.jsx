import React, { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import Link from 'next/link';
import Image from 'next/image';
import dynamic from 'next/dynamic';
import { getArticleById, saveArticle } from '../../../../lib/articles';

// Import Modern Article Editor dynamically
const ModernArticleEditor = dynamic(() => import('../../../../components/ModernArticleEditor'), {
  ssr: false,
});
// Import Bootstrap Rich Text Editor as alternative
const BootstrapRichTextEditor = dynamic(
  () => import('../../../../components/BootstrapRichTextEditor'),
  { ssr: false }
);
// Import Image Gallery dynamically
const ImageGallery = dynamic(() => import('../../../../components/ImageGallery'), { ssr: false });

const categories = ['‡∏Ç‡πà‡∏≤‡∏ß‡∏£‡∏ñ‡πÉ‡∏´‡∏°‡πà', '‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö', '‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', '‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô', '‡∏£‡∏ñ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤', '‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô'];

export default function EditArticle() {
  const router = useRouter();
  const { id } = router.query;

  const [article, setArticle] = useState({
    title: '',
    excerpt: '',
    content: '',
    category: '‡∏Ç‡πà‡∏≤‡∏ß‡∏£‡∏ñ‡πÉ‡∏´‡∏°‡πà',
    status: 'draft',
    featured: false,
    keywords: '',
    author: '‡∏Ñ‡∏£‡∏π‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏ñ‡∏™‡∏ß‡∏¢',
    image: '/herobanner/promotioncar.webp',
  });

  const [originalArticle, setOriginalArticle] = useState(null);
  const [saving, setSaving] = useState(false);
  const [loading, setLoading] = useState(true);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [showImageGallery, setShowImageGallery] = useState(false);
  const [hasChanges, setHasChanges] = useState(false);
  const [editorType, setEditorType] = useState('modern'); // modern, bootstrap

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ Authentication
  useEffect(() => {
    const checkAuth = () => {
      const isLoggedIn = localStorage.getItem('adminLoggedIn') === 'true';
      if (!isLoggedIn) {
        router.push('/admin/login');
        return;
      }
      setIsAuthenticated(true);
    };

    checkAuth();
  }, [router]);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
  const loadArticle = useCallback(async () => {
    try {
      setLoading(true);
      const data = await getArticleById(id);
      if (data) {
        setArticle(data);
        setOriginalArticle(data);
      } else {
        alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç');
        router.push('/admin/articles');
      }
    } catch (error) {
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å error ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö logging
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ');
      router.push('/admin/articles');
    } finally {
      setLoading(false);
    }
  }, [id, router]);

  useEffect(() => {
    if (isAuthenticated && id) {
      loadArticle();
    }
  }, [isAuthenticated, id, loadArticle]);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  useEffect(() => {
    if (originalArticle) {
      const changed = JSON.stringify(article) !== JSON.stringify(originalArticle);
      setHasChanges(changed);
    }
  }, [article, originalArticle]);

  const handleInputChange = (field, value) => {
    setArticle(prev => ({
      ...prev,
      [field]: value,
    }));
  };

  const handleImageSelect = imageUrl => {
    setArticle(prev => ({ ...prev, image: imageUrl }));
    setShowImageGallery(false);
  };

  const handleSave = async (status = article.status) => {
    if (!article.title.trim()) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°');
      return;
    }

    if (!article.excerpt.trim()) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏±‡πâ‡∏ô');
      return;
    }

    if (!article.content.trim()) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°');
      return;
    }

    try {
      setSaving(true);

      const articleData = {
        ...article,
        status,
        readTime: calculateReadTime(article.content),
      };

      const result = await saveArticle(articleData);

      if (result) {
        setOriginalArticle(result);
        setArticle(result);
        alert(`${status === 'published' ? '‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å'}‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);

        if (status === 'published') {
          router.push('/admin/articles');
        }
      } else {
        alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ');
      }
    } catch (error) {
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°: ' + error.message);
    } finally {
      setSaving(false);
    }
  };

  const calculateReadTime = content => {
    const words = content.replace(/<[^>]*>/g, '').split(/\s+/).length;
    const minutes = Math.ceil(words / 200); // 200 words per minute
    return `${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
  };

  const getArticleStats = () => {
    const text = article.content.replace(/<[^>]*>/g, '');
    return {
      chars: text.length,
      words: text.split(/\s+/).filter(word => word.length > 0).length,
      readTime: calculateReadTime(article.content),
    };
  };

  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
  useEffect(() => {
    const handleBeforeUnload = e => {
      if (hasChanges) {
        e.preventDefault();
        e.returnValue = '';
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);
    return () => window.removeEventListener('beforeunload', handleBeforeUnload);
  }, [hasChanges]);

  if (!isAuthenticated || loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto"></div>
          <p className="mt-4 text-gray-600">
            {!isAuthenticated ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå...' : '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°...'}
          </p>
        </div>
      </div>
    );
  }

  const stats = getArticleStats();

  return (
    <>
      <Head>
        <title>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°: {article.title} | ‡∏Ñ‡∏£‡∏π‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏ñ‡∏™‡∏ß‡∏¢ Admin</title>
        <meta name="robots" content="noindex, nofollow" />
      </Head>

      {/* Bootstrap CSS - Force Reload */}
      <link
        href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
        rel="stylesheet"
        key="bootstrap-css"
      />

      <div className="container-fluid py-4">
        <div className="row">
          {/* Sidebar */}
          <div className="col-md-2">
            <div className="list-group">
              <Link href="/admin" className="list-group-item list-group-item-action">
                üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å Admin
              </Link>
              <Link href="/admin/articles" className="list-group-item list-group-item-action">
                üìù ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
              </Link>
              <Link href="/admin/articles/new" className="list-group-item list-group-item-action">
                ‚ûï ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
              </Link>
            </div>
          </div>

          {/* Main Content */}
          <div className="col-md-10">
            <div className="d-flex justify-content-between align-items-center mb-4">
              <div>
                <h1 className="h3">‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°</h1>
                <nav aria-label="breadcrumb">
                  <ol className="breadcrumb">
                    <li className="breadcrumb-item">
                      <Link href="/admin/articles">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°</Link>
                    </li>
                    <li className="breadcrumb-item active">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: {article.title}</li>
                  </ol>
                </nav>
              </div>

              <div className="d-flex gap-2">
                {hasChanges && <span className="badge bg-warning text-dark">‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á</span>}
                <Link href="/admin/articles" className="btn btn-outline-secondary">
                  ‚Üê ‡∏Å‡∏•‡∏±‡∏ö
                </Link>
              </div>
            </div>

            {/* Article Form */}
            <div className="row">
              <div className="col-lg-8">
                <div className="card mb-4">
                  <div className="card-header">
                    <h5 className="card-title mb-0">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô</h5>
                  </div>
                  <div className="card-body">
                    {/* Title */}
                    <div className="mb-3">
                      <label htmlFor="article-title" className="form-label">
                        ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏° *
                      </label>
                      <input
                        id="article-title"
                        type="text"
                        value={article.title}
                        onChange={e => handleInputChange('title', e.target.value)}
                        placeholder="‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à..."
                        className="form-control"
                      />
                    </div>

                    {/* Excerpt */}
                    <div className="mb-3">
                      <label htmlFor="article-excerpt" className="form-label">
                        ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏±‡πâ‡∏ô *
                      </label>
                      <textarea
                        id="article-excerpt"
                        value={article.excerpt}
                        onChange={e => handleInputChange('excerpt', e.target.value)}
                        placeholder="‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏î‡∏π‡∏î‡∏ú‡∏π‡πâ‡∏≠‡πà‡∏≤‡∏ô..."
                        rows={3}
                        className="form-control"
                      />
                    </div>

                    {/* Keywords */}
                    <div className="mb-3">
                      <label htmlFor="article-keywords" className="form-label">
                        ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç SEO
                      </label>
                      <input
                        id="article-keywords"
                        type="text"
                        value={article.keywords}
                        onChange={e => handleInputChange('keywords', e.target.value)}
                        placeholder="‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SEO (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ)"
                        className="form-control"
                      />
                      <div className="form-text">
                        ‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ
                      </div>
                    </div>
                  </div>
                </div>

                {/* Content Editor */}
                <div className="card mb-4">
                  <div className="card-header">
                    <div className="d-flex justify-content-between align-items-center">
                      <h5 className="card-title mb-0">‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°</h5>

                      {/* Editor Type Selector */}
                      <div className="d-flex align-items-center">
                        <span className="me-2 text-sm">‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:</span>
                        <div className="btn-group btn-group-sm" role="group">
                          <button
                            type="button"
                            className={`btn ${editorType === 'modern' ? 'btn-primary' : 'btn-outline-primary'}`}
                            onClick={() => setEditorType('modern')}
                          >
                            üöÄ Modern
                          </button>
                          <button
                            type="button"
                            className={`btn ${editorType === 'bootstrap' ? 'btn-primary' : 'btn-outline-primary'}`}
                            onClick={() => setEditorType('bootstrap')}
                          >
                            üìã Classic
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="card-body p-0">
                    {editorType === 'modern' ? (
                      <ModernArticleEditor
                        value={article.content}
                        onChange={content => handleInputChange('content', content)}
                        placeholder="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ Modern Editor 2025 ‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢..."
                        articleId={`edit-${id}`}
                      />
                    ) : (
                      <BootstrapRichTextEditor
                        value={article.content}
                        onChange={content => handleInputChange('content', content)}
                        placeholder="‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå ‡∏û‡∏£‡πâ‡∏≠‡∏° Bootstrap Templates ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ..."
                        articleId={`edit-${id}`}
                      />
                    )}
                  </div>
                </div>
              </div>

              {/* Sidebar */}
              <div className="col-lg-4">
                {/* Article Stats */}
                <div className="card mb-4">
                  <div className="card-header">
                    <h6 className="card-title mb-0">üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°</h6>
                  </div>
                  <div className="card-body">
                    <div className="row text-center">
                      <div className="col-4">
                        <div className="text-primary h5 mb-0">{stats.words}</div>
                        <small className="text-muted">‡∏Ñ‡∏≥</small>
                      </div>
                      <div className="col-4">
                        <div className="text-success h5 mb-0">{stats.chars}</div>
                        <small className="text-muted">‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£</small>
                      </div>
                      <div className="col-4">
                        <div className="text-info h5 mb-0">{stats.readTime}</div>
                        <small className="text-muted">‡∏≠‡πà‡∏≤‡∏ô</small>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Settings */}
                <div className="card mb-4">
                  <div className="card-header">
                    <h6 className="card-title mb-0">‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤</h6>
                  </div>
                  <div className="card-body">
                    {/* Category */}
                    <div className="mb-3">
                      <label htmlFor="article-category" className="form-label">
                        ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
                      </label>
                      <select
                        id="article-category"
                        value={article.category}
                        onChange={e => handleInputChange('category', e.target.value)}
                        className="form-select"
                      >
                        {categories.map(category => (
                          <option key={category} value={category}>
                            {category}
                          </option>
                        ))}
                      </select>
                    </div>

                    {/* Status */}
                    <div className="mb-3">
                      <label htmlFor="article-status" className="form-label">
                        ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                      </label>
                      <select
                        id="article-status"
                        value={article.status}
                        onChange={e => handleInputChange('status', e.target.value)}
                        className="form-select"
                      >
                        <option value="draft">‡∏£‡πà‡∏≤‡∏á</option>
                        <option value="published">‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà</option>
                      </select>
                    </div>

                    {/* Featured */}
                    <div className="form-check">
                      <input
                        type="checkbox"
                        checked={article.featured}
                        onChange={e => handleInputChange('featured', e.target.checked)}
                        className="form-check-input"
                        id="featured"
                      />
                      <label className="form-check-label" htmlFor="featured">
                        ‚≠ê ‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡πà‡∏ô
                      </label>
                    </div>
                  </div>
                </div>

                {/* Cover Image */}
                <div className="card mb-4">
                  <div className="card-header">
                    <h6 className="card-title mb-0">üñºÔ∏è ‡∏£‡∏π‡∏õ‡∏õ‡∏Å</h6>
                  </div>
                  <div className="card-body">
                    <div className="text-center mb-3">
                      <Image
                        src={article.image}
                        alt="‡∏£‡∏π‡∏õ‡∏õ‡∏Å‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°"
                        width={200}
                        height={120}
                        className="rounded border"
                        style={{ objectFit: 'cover' }}
                      />
                    </div>
                    <button
                      onClick={() => setShowImageGallery(!showImageGallery)}
                      className="btn btn-outline-primary w-100"
                    >
                      ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏õ‡∏Å‡πÉ‡∏´‡∏°‡πà
                    </button>
                  </div>
                </div>

                {/* Actions */}
                <div className="card">
                  <div className="card-body">
                    <div className="d-grid gap-2">
                      <button
                        onClick={() => handleSave('draft')}
                        disabled={saving}
                        className="btn btn-outline-primary"
                      >
                        {saving ? (
                          <>
                            <span className="spinner-border spinner-border-sm me-2"></span>
                            ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...
                          </>
                        ) : (
                          'üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡πà‡∏≤‡∏á'
                        )}
                      </button>

                      <button
                        onClick={() => handleSave('published')}
                        disabled={saving}
                        className="btn btn-success"
                      >
                        {saving ? (
                          <>
                            <span className="spinner-border spinner-border-sm me-2"></span>
                            ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà...
                          </>
                        ) : (
                          'üöÄ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡∏∞‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà'
                        )}
                      </button>

                      <Link
                        href={`/features/${id}`}
                        className="btn btn-outline-info"
                        target="_blank"
                      >
                        üëÅÔ∏è ‡∏î‡∏π‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
                      </Link>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Image Gallery Modal */}
            {showImageGallery && (
              <div className="modal show d-block" style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}>
                <div className="modal-dialog modal-lg">
                  <div className="modal-content">
                    <div className="modal-header">
                      <h5 className="modal-title">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏õ‡∏Å</h5>
                      <button
                        onClick={() => setShowImageGallery(false)}
                        className="btn-close"
                      ></button>
                    </div>
                    <div className="modal-body">
                      <ImageGallery
                        articleId={`edit-${id}`}
                        onImageSelect={handleImageSelect}
                        selectMode={true}
                      />
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Bootstrap JS */}
      <script
        src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
        defer
      />
    </>
  );
}
