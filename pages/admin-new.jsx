import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import dynamic from 'next/dynamic';
import SEO from '../components/SEO';

// Dynamic imports ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô SSR issues
const AdminImageManager = dynamic(() => Promise.resolve(AdminImageManagerComponent), {
  ssr: false,
});
const AdminBlogManager = dynamic(() => Promise.resolve(AdminBlogManagerComponent), { ssr: false });

// Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Admin ‡∏û‡∏£‡πâ‡∏≠‡∏° access control
function useAdminAuth() {
  const router = useRouter();
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [hasAccess, setHasAccess] = useState(false);

  useEffect(() => {
    // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    const checkBasicAccess = () => {
      const { secret, admin_access } = router.query;
      const validSecret = process.env.NEXT_PUBLIC_ADMIN_SECRET || 'secure2024';
      const savedAccess = localStorage.getItem('admin_access_granted');

      if (admin_access === 'true' || secret === validSecret || savedAccess === 'true') {
        setHasAccess(true);
        localStorage.setItem('admin_access_granted', 'true');
        return true;
      }

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
      router.push('/');
      return false;
    };

    // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô
    const checkAuth = () => {
      if (!checkBasicAccess()) return;

      const token = localStorage.getItem('admin_token');
      const expiry = localStorage.getItem('admin_token_expiry');

      if (!token || !expiry || new Date() >= new Date(expiry)) {
        localStorage.removeItem('admin_token');
        localStorage.removeItem('admin_token_expiry');
        localStorage.removeItem('admin_user');
        router.push('/admin-login?admin_access=true');
        return;
      }

      setIsAuthenticated(true);
      setIsLoading(false);
    };

    checkAuth();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    const interval = setInterval(checkAuth, 30000);

    return () => clearInterval(interval);
  }, [router]);

  return { isAuthenticated, isLoading, hasAccess };
}

export default function AdminDashboard() {
  const { isAuthenticated, isLoading, hasAccess } = useAdminAuth();
  const [activeTab, setActiveTab] = useState('images');
  const router = useRouter();

  // Loading state
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
      </div>
    );
  }

  // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
  if (!hasAccess || !isAuthenticated) {
    return null;
  }

  const logout = () => {
    localStorage.removeItem('admin_token');
    localStorage.removeItem('admin_token_expiry');
    localStorage.removeItem('admin_user');
    localStorage.removeItem('admin_access_granted');
    router.push('/');
  };

  // Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  function AdminImageManagerComponent() {
    const [uploadStatus, setUploadStatus] = useState('');
    const [processing, setProcessing] = useState(false);
    const [results, setResults] = useState(null);
    const [uploadType, setUploadType] = useState('article'); // article, cover, content

    // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    const handleImageUpload = async event => {
      const files = Array.from(event.target.files);
      if (files.length === 0) return;

      setProcessing(true);
      setUploadStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ...');

      const results = [];

      for (const file of files) {
        try {
          const formData = new FormData();
          formData.append('image', file);
          formData.append('context', uploadType);

          // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
          if (uploadType === 'cover') {
            formData.append('quality', '90');
            formData.append('width', '1200');
            formData.append('height', '630');
          } else if (uploadType === 'content') {
            formData.append('quality', '85');
            formData.append('width', '800');
          } else {
            formData.append('quality', '80');
            formData.append('width', '600');
          }

          const response = await fetch('/api/admin/upload-image', {
            method: 'POST',
            headers: {
              Authorization: `Bearer ${localStorage.getItem('admin_token')}`,
            },
            body: formData,
          });

          const result = await response.json();

          if (response.ok) {
            results.push({
              original: file.name,
              ...result,
            });
            setUploadStatus(`‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${file.name}`);
          } else {
            results.push({
              original: file.name,
              error: result.error || '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            });
          }
        } catch (error) {
          results.push({
            original: file.name,
            error: error.message,
          });
        }
      }

      setResults(results);
      setProcessing(false);
      setUploadStatus('‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
    };

    return (
      <div className="space-y-6">
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-xl font-semibold mb-4">‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</h2>

          {/* ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏π‡∏õ */}
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</label>
            <select
              value={uploadType}
              onChange={e => setUploadType(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded-md"
            >
              <option value="article">‡∏£‡∏π‡∏õ‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏° (600px, ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û 80%)</option>
              <option value="cover">‡∏£‡∏π‡∏õ‡∏õ‡∏Å (1200x630px, ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û 90%)</option>
              <option value="content">‡∏£‡∏π‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (800px, ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û 85%)</option>
            </select>
          </div>

          {/* ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå */}
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (JPG, PNG, WebP)
            </label>
            <input
              type="file"
              multiple
              accept="image/*"
              onChange={handleImageUpload}
              disabled={processing}
              className="w-full p-2 border border-gray-300 rounded-md"
            />
          </div>

          {/* ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */}
          {uploadStatus && (
            <div className="mb-4 p-3 bg-blue-50 rounded-md">
              <p className="text-blue-700">{uploadStatus}</p>
              {processing && (
                <div className="mt-2">
                  <div className="animate-spin inline-block w-4 h-4 border-2 border-blue-600 border-r-transparent rounded-full"></div>
                  <span className="ml-2 text-sm">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...</span>
                </div>
              )}
            </div>
          )}

          {/* ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå */}
          {results && (
            <div className="mt-6">
              <h3 className="text-lg font-medium mb-3">‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î</h3>
              <div className="space-y-3">
                {results.map((result, index) => (
                  <div key={index} className="border rounded-lg p-4">
                    <h4 className="font-medium">{result.original}</h4>
                    {result.error ? (
                      <p className="text-red-600 text-sm mt-1">‚ùå {result.error}</p>
                    ) : (
                      <div className="text-sm text-gray-600 mt-2 space-y-1">
                        <p>‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</p>
                        <p>
                          üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö: <code>{result.original_url}</code>
                        </p>
                        <p>
                          üîÑ ‡πÑ‡∏ü‡∏•‡πå WebP: <code>{result.webp_url}</code>
                        </p>
                        <p>
                          üìè ‡∏Ç‡∏ô‡∏≤‡∏î: {result.width}x{result.height}px
                        </p>
                        <p>üíæ ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: {result.file_size}</p>
                        {result.savings && (
                          <p className="text-green-600">üí∞ ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà: {result.savings}</p>
                        )}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    );
  }

  // Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
  function AdminBlogManagerComponent() {
    const [articles, setArticles] = useState([]);
    const [showEditor, setShowEditor] = useState(false);
    const [editingArticle, setEditingArticle] = useState(null);
    const [newArticle, setNewArticle] = useState({
      title: '',
      slug: '',
      excerpt: '',
      content: '',
      coverImage: '',
      tags: '',
      published: false,
    });

    // ‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
    const loadArticles = async () => {
      try {
        const response = await fetch('/api/admin/articles', {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('admin_token')}`,
          },
        });

        if (response.ok) {
          const data = await response.json();
          setArticles(data.articles || []);
        }
      } catch (error) {
        console.error('Error loading articles:', error);
      }
    };

    useEffect(() => {
      loadArticles();
    }, []);

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
    const saveArticle = async () => {
      try {
        const articleData = {
          ...newArticle,
          tags: newArticle.tags
            .split(',')
            .map(tag => tag.trim())
            .filter(Boolean),
        };

        const response = await fetch('/api/admin/articles', {
          method: editingArticle ? 'PUT' : 'POST',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${localStorage.getItem('admin_token')}`,
          },
          body: JSON.stringify(
            editingArticle ? { ...articleData, id: editingArticle.id } : articleData
          ),
        });

        if (response.ok) {
          setShowEditor(false);
          setEditingArticle(null);
          setNewArticle({
            title: '',
            slug: '',
            excerpt: '',
            content: '',
            coverImage: '',
            tags: '',
            published: false,
          });
          loadArticles();
          alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
        } else {
          const error = await response.json();
          alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.error);
        }
      } catch (error) {
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
      }
    };

    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
    const editArticle = article => {
      setEditingArticle(article);
      setNewArticle({
        title: article.title,
        slug: article.slug,
        excerpt: article.excerpt,
        content: article.content,
        coverImage: article.coverImage || '',
        tags: article.tags?.join(', ') || '',
        published: article.published,
      });
      setShowEditor(true);
    };

    // ‡∏•‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
    const deleteArticle = async articleId => {
      if (!confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) return;

      try {
        const response = await fetch('/api/admin/articles', {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${localStorage.getItem('admin_token')}`,
          },
          body: JSON.stringify({ id: articleId }),
        });

        if (response.ok) {
          loadArticles();
          alert('‡∏•‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
        } else {
          const error = await response.json();
          alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.error);
        }
      } catch (error) {
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
      }
    };

    return (
      <div className="space-y-6">
        {!showEditor ? (
          <>
            {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏° */}
            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-semibold">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°</h2>
                <button
                  onClick={() => setShowEditor(true)}
                  className="bg-primary hover:bg-primary-dark text-white px-4 py-2 rounded-md"
                >
                  + ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
                </button>
              </div>

              <div className="space-y-4">
                {articles.length === 0 ? (
                  <p className="text-gray-500 text-center py-8">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°</p>
                ) : (
                  articles.map(article => (
                    <div key={article.id} className="border rounded-lg p-4">
                      <div className="flex justify-between items-start">
                        <div className="flex-1">
                          <h3 className="font-medium text-lg">{article.title}</h3>
                          <p className="text-gray-600 text-sm mt-1">{article.excerpt}</p>
                          <div className="flex items-center space-x-4 mt-2 text-sm text-gray-500">
                            <span>
                              üìÖ {new Date(article.createdAt).toLocaleDateString('th-TH')}
                            </span>
                            <span
                              className={`px-2 py-1 rounded-full text-xs ${
                                article.published
                                  ? 'bg-green-100 text-green-800'
                                  : 'bg-gray-100 text-gray-800'
                              }`}
                            >
                              {article.published ? '‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡πÅ‡∏•‡πâ‡∏ß' : '‡∏£‡πà‡∏≤‡∏á'}
                            </span>
                          </div>
                        </div>
                        <div className="flex space-x-2 ml-4">
                          <button
                            onClick={() => editArticle(article)}
                            className="text-blue-600 hover:text-blue-800 px-3 py-1 text-sm"
                          >
                            ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                          </button>
                          <button
                            onClick={() => deleteArticle(article.id)}
                            className="text-red-600 hover:text-red-800 px-3 py-1 text-sm"
                          >
                            ‡∏•‡∏ö
                          </button>
                        </div>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </div>
          </>
        ) : (
          /* Editor */
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-xl font-semibold">
                {editingArticle ? '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°' : '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà'}
              </h2>
              <button
                onClick={() => {
                  setShowEditor(false);
                  setEditingArticle(null);
                }}
                className="text-gray-500 hover:text-gray-700"
              >
                ‚ùå ‡∏õ‡∏¥‡∏î
              </button>
            </div>

            <div className="space-y-4">
              {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏° */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°</label>
                <input
                  type="text"
                  value={newArticle.title}
                  onChange={e => {
                    setNewArticle(prev => ({
                      ...prev,
                      title: e.target.value,
                      slug: e.target.value
                        .toLowerCase()
                        .replace(/[^a-z0-9‡∏Å-‡πô\s]/g, '')
                        .replace(/\s+/g, '-'),
                    }));
                  }}
                  className="w-full p-3 border border-gray-300 rounded-md"
                  placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°..."
                />
              </div>

              {/* Slug */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">URL Slug</label>
                <input
                  type="text"
                  value={newArticle.slug}
                  onChange={e => setNewArticle(prev => ({ ...prev, slug: e.target.value }))}
                  className="w-full p-3 border border-gray-300 rounded-md"
                  placeholder="url-slug"
                />
              </div>

              {/* ‡∏™‡∏£‡∏∏‡∏õ */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°</label>
                <textarea
                  value={newArticle.excerpt}
                  onChange={e => setNewArticle(prev => ({ ...prev, excerpt: e.target.value }))}
                  className="w-full p-3 border border-gray-300 rounded-md"
                  rows={3}
                  placeholder="‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô‡πÜ..."
                />
              </div>

              {/* ‡∏£‡∏π‡∏õ‡∏õ‡∏Å */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">URL ‡∏£‡∏π‡∏õ‡∏õ‡∏Å</label>
                <input
                  type="text"
                  value={newArticle.coverImage}
                  onChange={e => setNewArticle(prev => ({ ...prev, coverImage: e.target.value }))}
                  className="w-full p-3 border border-gray-300 rounded-md"
                  placeholder="https://example.com/image.webp"
                />
              </div>

              {/* ‡πÅ‡∏ó‡πá‡∏Å */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡πÅ‡∏ó‡πá‡∏Å (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ)
                </label>
                <input
                  type="text"
                  value={newArticle.tags}
                  onChange={e => setNewArticle(prev => ({ ...prev, tags: e.target.value }))}
                  className="w-full p-3 border border-gray-300 rounded-md"
                  placeholder="‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå, ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà, ‡∏£‡∏ñ‡∏°‡∏∑‡∏≠‡∏™‡∏≠‡∏á"
                />
              </div>

              {/* ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏° (Markdown)
                </label>
                <textarea
                  value={newArticle.content}
                  onChange={e => setNewArticle(prev => ({ ...prev, content: e.target.value }))}
                  className="w-full p-3 border border-gray-300 rounded-md font-mono"
                  rows={15}
                  placeholder="# ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠

‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°...

## ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢

- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ 1
- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ 2

![‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û](url)"
                />
              </div>

              {/* ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà */}
              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="published"
                  checked={newArticle.published}
                  onChange={e => setNewArticle(prev => ({ ...prev, published: e.target.checked }))}
                  className="mr-2"
                />
                <label htmlFor="published" className="text-sm font-medium text-gray-700">
                  ‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
                </label>
              </div>

              {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å */}
              <div className="flex justify-end space-x-4 pt-4">
                <button
                  onClick={() => {
                    setShowEditor(false);
                    setEditingArticle(null);
                  }}
                  className="px-4 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50"
                >
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
                <button
                  onClick={saveArticle}
                  className="px-4 py-2 bg-primary text-white rounded-md hover:bg-primary-dark"
                >
                  {editingArticle ? '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å'}‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  }

  return (
    <>
      <SEO title="‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ - ‡∏Ñ‡∏£‡∏π‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏ñ‡∏™‡∏ß‡∏¢" description="‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå ‡∏£‡∏ñ‡∏°‡∏∑‡∏≠‡∏™‡∏≠‡∏á‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà" />

      <div className="min-h-screen bg-gray-50">
        {/* Header */}
        <div className="bg-white shadow-sm">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center h-16">
              <h1 className="text-xl font-prompt font-semibold text-gray-900">
                ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
              </h1>
              <button
                onClick={logout}
                className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md text-sm font-medium"
              >
                ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
              </button>
            </div>
          </div>
        </div>

        {/* Navigation */}
        <div className="bg-white border-b">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <nav className="flex space-x-8">
              <button
                onClick={() => setActiveTab('images')}
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'images'
                    ? 'border-primary text-primary'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                üì∏ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
              </button>
              <button
                onClick={() => setActiveTab('articles')}
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'articles'
                    ? 'border-primary text-primary'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                ‚úçÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
              </button>
            </nav>
          </div>
        </div>

        {/* Content */}
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {activeTab === 'images' && <AdminImageManager />}
          {activeTab === 'articles' && <AdminBlogManager />}
        </div>
      </div>
    </>
  );
}
