import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import SEO from '../components/SEO';

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
function useAccessCheck() {
  const [hasAccess, setHasAccess] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö referer header (‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
    const referer = document.referrer;
    const currentDomain = window.location.hostname;

    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö localStorage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß
    const savedAccess = localStorage.getItem('admin_access_granted');

    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö query parameters (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å)
    const { secret, admin_access, key } = router.query;
    const validSecret = process.env.NEXT_PUBLIC_ADMIN_SECRET || 'secure2024';

    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user agent pattern (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà bot)
    const userAgent = navigator.userAgent;
    const isBot = /bot|crawl|spider|slurp/i.test(userAgent);

    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 5: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏µ JavaScript (bots ‡∏°‡∏±‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ)
    const hasJS = typeof window !== 'undefined';

    // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
    const conditions = [
      // ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
      referer.includes(currentDomain) || referer.includes('chiangmaiusedcar.com'),

      // ‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏•‡πâ‡∏ß
      savedAccess === 'true',

      // ‡∏°‡∏µ secret parameter
      secret === validSecret || admin_access === 'true' || key === 'admin',

      // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà bot ‡πÅ‡∏•‡∏∞‡∏°‡∏µ JavaScript
      !isBot && hasJS,

      // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô HTTPS (‡πÉ‡∏ô production)
      window.location.protocol === 'https:' || window.location.hostname === 'localhost',
    ];

    // ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏´‡∏ô‡∏∂‡πà‡∏á
    if (conditions.some(condition => condition)) {
      setHasAccess(true);
      localStorage.setItem('admin_access_granted', 'true');
      localStorage.setItem('admin_last_access', new Date().toISOString());
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á 404
      router.push('/404');
    }

    setIsLoading(false);
  }, [router]);

  return { hasAccess, isLoading };
}

export default function AdminLogin() {
  const { hasAccess, isLoading: accessLoading } = useAccessCheck();
  const [credentials, setCredentials] = useState({
    username: '',
    password: '',
    twoFactorCode: '',
  });
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [showTwoFactor, setShowTwoFactor] = useState(false);
  const [attempts, setAttempts] = useState(0);
  const [lockoutTime, setLockoutTime] = useState(null);
  const router = useRouter();

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö lockout - ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô conditional rendering
  useEffect(() => {
    if (!hasAccess) return; // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå

    const lockout = localStorage.getItem('admin_lockout');
    if (lockout) {
      const lockoutEnd = new Date(lockout);
      if (new Date() < lockoutEnd) {
        setLockoutTime(lockoutEnd);
      } else {
        localStorage.removeItem('admin_lockout');
        localStorage.removeItem('login_attempts');
      }
    }

    const savedAttempts = localStorage.getItem('login_attempts');
    if (savedAttempts) {
      setAttempts(parseInt(savedAttempts));
    }
  }, [hasAccess]);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
  useEffect(() => {
    if (!hasAccess) return; // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå

    const token = localStorage.getItem('admin_token');
    const tokenExpiry = localStorage.getItem('admin_token_expiry');

    if (token && tokenExpiry && new Date() < new Date(tokenExpiry)) {
      router.push('/admin');
    }
  }, [router, hasAccess]);

  // Loading ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
  if (accessLoading) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
      </div>
    );
  }

  if (!hasAccess) {
    return null; // ‡∏´‡∏£‡∏∑‡∏≠ redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
  }

  const handleSubmit = async e => {
    e.preventDefault();

    if (lockoutTime && new Date() < lockoutTime) {
      setError(`‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ ${Math.ceil((lockoutTime - new Date()) / 60000)} ‡∏ô‡∏≤‡∏ó‡∏µ`);
      return;
    }

    if (attempts >= 5) {
      const lockout = new Date(Date.now() + 30 * 60 * 1000); // ‡∏•‡πá‡∏≠‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ
      localStorage.setItem('admin_lockout', lockout.toISOString());
      setLockoutTime(lockout);
      setError('‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ú‡∏¥‡∏î 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      return;
    }

    setIsLoading(true);
    setError('');

    try {
      const response = await fetch('/api/admin/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Forwarded-For': await getClientIP(),
          'User-Agent': navigator.userAgent,
        },
        body: JSON.stringify({
          username: credentials.username,
          password: credentials.password,
          twoFactorCode: credentials.twoFactorCode,
          fingerprint: await generateFingerprint(),
        }),
      });

      const result = await response.json();

      if (result.success) {
        if (result.requireTwoFactor && !showTwoFactor) {
          setShowTwoFactor(true);
          setError('');
        } else {
          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å token ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô
          localStorage.setItem('admin_token', result.token);
          localStorage.setItem('admin_token_expiry', result.expiry);
          localStorage.setItem('admin_user', JSON.stringify(result.user));
          localStorage.removeItem('login_attempts');
          localStorage.removeItem('admin_lockout');

          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
          await logAdminActivity('LOGIN_SUCCESS');

          router.push('/admin');
        }
      } else {
        const newAttempts = attempts + 1;
        setAttempts(newAttempts);
        localStorage.setItem('login_attempts', newAttempts.toString());

        await logAdminActivity('LOGIN_FAILED', {
          username: credentials.username,
          attempts: newAttempts,
        });

        setError(result.message || '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');

        if (newAttempts >= 3) {
          setError(`‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏¥‡∏î ${newAttempts} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å ${5 - newAttempts} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);
        }
      }
    } catch (error) {
      console.error('Login error:', error);
      setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
    } finally {
      setIsLoading(false);
    }
  };

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á fingerprint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  const generateFingerprint = async () => {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    ctx.textBaseline = 'top';
    ctx.font = '14px Arial';
    ctx.fillText('Security fingerprint', 2, 2);

    return btoa(
      JSON.stringify({
        canvas: canvas.toDataURL(),
        screen: `${screen.width}x${screen.height}`,
        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        language: navigator.language,
        platform: navigator.platform,
        userAgent: navigator.userAgent.substring(0, 100),
      })
    );
  };

  // ‡∏î‡∏∂‡∏á IP address
  const getClientIP = async () => {
    try {
      const response = await fetch('https://api.ipify.org?format=json');
      const data = await response.json();
      return data.ip;
    } catch {
      return 'unknown';
    }
  };

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å activity log
  const logAdminActivity = async (action, data = {}) => {
    try {
      await fetch('/api/admin/log', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action,
          data,
          timestamp: new Date().toISOString(),
          ip: await getClientIP(),
          userAgent: navigator.userAgent,
        }),
      });
    } catch (error) {
      console.error('Failed to log activity:', error);
    }
  };

  if (lockoutTime && new Date() < lockoutTime) {
    return (
      <>
        <SEO title="‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Å - Admin" robots="noindex,nofollow" />
        <div className="min-h-screen bg-red-50 flex items-center justify-center">
          <div className="max-w-md w-full bg-white rounded-xl shadow-lg p-8 border border-red-200">
            <div className="text-center">
              <div className="text-red-600 text-6xl mb-4">üîí</div>
              <h1 className="text-2xl font-bold text-red-800 mb-4 font-prompt">‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Å</h1>
              <p className="text-red-600 mb-4 font-prompt">
                ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Å‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏¥‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á
              </p>
              <p className="text-sm text-gray-600 font-prompt">
                ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {Math.ceil((lockoutTime - new Date()) / 60000)} ‡∏ô‡∏≤‡∏ó‡∏µ
              </p>
            </div>
          </div>
        </div>
      </>
    );
  }

  return (
    <>
      <SEO title="‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Admin - ‡∏Ñ‡∏£‡∏π‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏ñ‡∏™‡∏ß‡∏¢" robots="noindex,nofollow" />
      <div className="min-h-screen bg-gradient-to-br from-blue-900 via-blue-800 to-indigo-900 flex items-center justify-center p-4">
        <div className="max-w-md w-full">
          {/* Header */}
          <div className="text-center mb-8">
            <div className="inline-flex items-center justify-center w-16 h-16 bg-white rounded-full mb-4 shadow-lg">
              <svg
                className="w-8 h-8 text-blue-600"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"
                />
              </svg>
            </div>
            <h1 className="text-3xl font-bold text-white mb-2 font-prompt">‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Admin</h1>
            <p className="text-blue-200 font-prompt">‡∏Ñ‡∏£‡∏π‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏ñ‡∏™‡∏ß‡∏¢ - ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà</p>
          </div>

          {/* Login Form */}
          <div className="bg-white rounded-xl shadow-2xl p-8">
            <form onSubmit={handleSubmit} className="space-y-6">
              {!showTwoFactor ? (
                <>
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2 font-prompt">
                      ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                    </label>
                    <input
                      type="text"
                      value={credentials.username}
                      onChange={e =>
                        setCredentials(prev => ({ ...prev, username: e.target.value }))
                      }
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent font-prompt"
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
                      required
                      autoComplete="username"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2 font-prompt">
                      ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
                    </label>
                    <input
                      type="password"
                      value={credentials.password}
                      onChange={e =>
                        setCredentials(prev => ({ ...prev, password: e.target.value }))
                      }
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent font-prompt"
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                      required
                      autoComplete="current-password"
                    />
                  </div>
                </>
              ) : (
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2 font-prompt">
                    ‡∏£‡∏´‡∏±‡∏™ 2FA (6 ‡∏´‡∏•‡∏±‡∏Å)
                  </label>
                  <input
                    type="text"
                    value={credentials.twoFactorCode}
                    onChange={e =>
                      setCredentials(prev => ({ ...prev, twoFactorCode: e.target.value }))
                    }
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-center text-2xl tracking-widest font-mono"
                    placeholder="000000"
                    maxLength={6}
                    required
                    autoComplete="one-time-code"
                  />
                  <p className="text-sm text-gray-500 mt-2 font-prompt">
                    ‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™ 6 ‡∏´‡∏•‡∏±‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏õ Google Authenticator
                  </p>
                </div>
              )}

              {error && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                  <p className="text-red-800 text-sm font-prompt">{error}</p>
                </div>
              )}

              <button
                type="submit"
                disabled={isLoading}
                className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg transition-colors disabled:bg-gray-400 font-prompt"
              >
                {isLoading ? (
                  <div className="flex items-center justify-center">
                    <svg
                      className="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                    >
                      <circle
                        className="opacity-25"
                        cx="12"
                        cy="12"
                        r="10"
                        stroke="currentColor"
                        strokeWidth="4"
                      ></circle>
                      <path
                        className="opacity-75"
                        fill="currentColor"
                        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                      ></path>
                    </svg>
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...
                  </div>
                ) : showTwoFactor ? (
                  '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™ 2FA'
                ) : (
                  '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö'
                )}
              </button>

              {showTwoFactor && (
                <button
                  type="button"
                  onClick={() => setShowTwoFactor(false)}
                  className="w-full text-blue-600 hover:text-blue-800 text-sm font-prompt"
                >
                  ‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
                </button>
              )}
            </form>

            {/* Security Info */}
            <div className="mt-6 pt-6 border-t border-gray-200">
              <div className="text-xs text-gray-500 text-center space-y-1 font-prompt">
                <p>üîí ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏π‡∏á</p>
                <p>üì± ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô 2 ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢ (2FA)</p>
                <p>‚è∞ ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</p>
                {attempts > 0 && (
                  <p className="text-red-500">‚ö†Ô∏è ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏¥‡∏î {attempts} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
