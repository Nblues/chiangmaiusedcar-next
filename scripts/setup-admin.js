#!/usr/bin/env node

/**
 * Admin Setup Script
 * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö Admin ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á 2FA
 */

const crypto = require('crypto');
const speakeasy = require('speakeasy');
const qrcode = require('qrcode');
const { promises: fs } = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

function question(prompt) {
  return new Promise(resolve => {
    rl.question(prompt, resolve);
  });
}

async function setupAdmin() {
  console.log('üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö Admin ‡∏Ñ‡∏£‡∏π‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏ñ‡∏™‡∏ß‡∏¢');
  console.log('='.repeat(50));

  try {
    // 1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ username ‡πÅ‡∏•‡∏∞ password
    const username = (await question('‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Admin (default: admin): ')) || 'admin';
    const password = await question('‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á): ');

    if (!password || password.length < 8) {
      console.log('‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
      rl.close();
      return;
    }

    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á password hash
    const passwordHash = crypto.createHash('sha256').update(password).digest('hex');

    // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á 2FA secret
    const secret = speakeasy.generateSecret({
      name: '‡∏Ñ‡∏£‡∏π‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏ñ‡∏™‡∏ß‡∏¢ Admin',
      issuer: 'ChiangMaiUsedCar',
      length: 20,
    });

    // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT secret
    const jwtSecret = crypto.randomBytes(64).toString('hex');

    // 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google Authenticator
    console.log('\nüì± ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Authenticator:');
    console.log('1. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏≠‡∏õ Google Authenticator ‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠');
    console.log('2. ‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏Å Secret key ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á');
    console.log('\nüîë Secret Key:', secret.base32);

    try {
      const qrCodeDataURL = await qrcode.toDataURL(secret.otpauth_url);
      console.log('\nüì∑ QR Code URL:', qrCodeDataURL);
      console.log('üí° ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å URL ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÑ‡∏õ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π QR Code');
    } catch (error) {
      console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ Secret Key ‡πÅ‡∏ó‡∏ô');
    }

    // 6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 2FA
    console.log('\nüîê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 2FA:');
    const testToken = await question('‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™ 6 ‡∏´‡∏•‡∏±‡∏Å‡∏à‡∏≤‡∏Å Google Authenticator ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ');

    const verified = speakeasy.totp.verify({
      secret: secret.base32,
      encoding: 'base32',
      token: testToken,
      window: 2,
    });

    if (!verified) {
      console.log('‚ùå ‡∏£‡∏´‡∏±‡∏™ 2FA ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
      rl.close();
      return;
    }

    console.log('‚úÖ ‡∏£‡∏´‡∏±‡∏™ 2FA ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!');

    // 7. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .env.local
    const envContent = `# Admin Configuration - Generated ${new Date().toISOString()}
# üîí ‡∏≠‡∏¢‡πà‡∏≤‡πÅ‡∏ä‡∏£‡πå‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏Å‡∏±‡∏ö‡πÉ‡∏Ñ‡∏£‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡πà‡∏≤ commit ‡∏•‡∏á Git!

# Admin Credentials
ADMIN_USERNAME=${username}
ADMIN_PASSWORD_HASH=${passwordHash}

# 2FA Secret
ADMIN_2FA_SECRET=${secret.base32}

# JWT Secret
JWT_SECRET=${jwtSecret}

# Image Processing Token
IMAGE_PROCESS_TOKEN=${crypto.randomBytes(32).toString('hex')}

# Allowed Admin IPs (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ó‡∏∏‡∏Å IP)
ALLOWED_ADMIN_IPS=

# Production Settings
NODE_ENV=production
`;

    const envPath = path.join(process.cwd(), '.env.local');
    await fs.writeFile(envPath, envContent);

    console.log('\n‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    console.log('='.repeat(50));
    console.log('üìÑ ‡πÑ‡∏ü‡∏•‡πå .env.local ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß');
    console.log('üîó ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà: http://localhost:3000/admin-login');
    console.log('\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö:');
    console.log(`   Username: ${username}`);
    console.log(`   Password: ${password}`);
    console.log(`   2FA Secret: ${secret.base32}`);
    console.log('\nüîí ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏à‡∏≥:');
    console.log('   - ‡∏≠‡∏¢‡πà‡∏≤‡πÅ‡∏ä‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏Å‡∏±‡∏ö‡πÉ‡∏Ñ‡∏£');
    console.log('   - ‡∏™‡∏≥‡∏£‡∏≠‡∏á Secret Key ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢');
    console.log('   - ‡πÉ‡∏ä‡πâ VPN ‡∏´‡∏£‡∏∑‡∏≠ IP ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á');
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
  } finally {
    rl.close();
  }
}

if (require.main === module) {
  setupAdmin();
}

module.exports = { setupAdmin };
