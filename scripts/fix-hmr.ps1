# Fix WebSocket HMR - Windows PowerShell Script
# ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ WebSocket HMR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Next.js

param(
    [switch]$Reset,
    [switch]$Production,
    [switch]$Development,
    [switch]$Help
)

# ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PowerShell output
function Write-ColoredText {
    param(
        [string]$Text,
        [string]$Color = "White"
    )
    Write-Host $Text -ForegroundColor $Color
}

function Write-Info { param([string]$Text) Write-ColoredText "üîç $Text" "Cyan" }
function Write-Success { param([string]$Text) Write-ColoredText "‚úÖ $Text" "Green" }
function Write-Warning { param([string]$Text) Write-ColoredText "‚ö†Ô∏è $Text" "Yellow" }
function Write-Error { param([string]$Text) Write-ColoredText "‚ùå $Text" "Red" }

function Show-Help {
    Write-ColoredText "`n=== WebSocket HMR Fix Tool - ‡∏Ñ‡∏£‡∏π‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏ñ‡∏™‡∏ß‡∏¢ ===" "Magenta"
    Write-Host ""
    Write-Host "Usage: .\fix-hmr.ps1 [options]"
    Write-Host ""
    Write-Host "Options:"
    Write-Host "  -Reset        ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï .next directory ‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡πÉ‡∏´‡∏°‡πà"
    Write-Host "  -Production   ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production (‡∏õ‡∏¥‡∏î HMR logs)"
    Write-Host "  -Development  ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö development (‡πÄ‡∏õ‡∏¥‡∏î HMR)"
    Write-Host "  -Help         ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ"
    Write-Host ""
    Write-Host "Examples:"
    Write-Host "  .\fix-hmr.ps1 -Reset           # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà"
    Write-Host "  .\fix-hmr.ps1 -Development     # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ dev mode"
    Write-Host "  .\fix-hmr.ps1 -Production      # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ prod mode"
    exit 0
}

function Test-CommandExists {
    param([string]$Command)
    return (Get-Command $Command -ErrorAction SilentlyContinue) -ne $null
}

function Get-PackageManager {
    if (Test-CommandExists "pnpm") {
        return "pnpm"
    } elseif (Test-CommandExists "yarn") {
        return "yarn"
    } elseif (Test-CommandExists "npm") {
        return "npm"
    } else {
        Write-Error "‡πÑ‡∏°‡πà‡∏û‡∏ö package manager (npm, yarn, ‡∏´‡∏£‡∏∑‡∏≠ pnpm)"
        exit 1
    }
}

function Remove-NextDirectory {
    $nextDir = ".\.next"
    if (Test-Path $nextDir) {
        Write-Info "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö .next directory..."
        Remove-Item $nextDir -Recurse -Force
        Write-Success "‡∏•‡∏ö .next directory ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
    } else {
        Write-Warning ".next directory ‡πÑ‡∏°‡πà‡∏û‡∏ö"
    }
}

function Clear-PackageCache {
    $packageManager = Get-PackageManager
    Write-Info "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πâ‡∏≤‡∏á cache ‡∏Ç‡∏≠‡∏á $packageManager..."
    
    try {
        switch ($packageManager) {
            "pnpm" { 
                & pnpm store prune 2>$null
                Write-Success "‡∏•‡πâ‡∏≤‡∏á pnpm cache ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
            }
            "yarn" { 
                & yarn cache clean 2>$null
                Write-Success "‡∏•‡πâ‡∏≤‡∏á yarn cache ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
            }
            "npm" { 
                & npm cache clean --force 2>$null
                Write-Success "‡∏•‡πâ‡∏≤‡∏á npm cache ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
            }
        }
    } catch {
        Write-Warning "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πâ‡∏≤‡∏á cache ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠"
    }
}

function Install-Dependencies {
    $packageManager = Get-PackageManager
    Write-Info "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡∏î‡πâ‡∏ß‡∏¢ $packageManager..."
    
    try {
        switch ($packageManager) {
            "pnpm" { & pnpm install }
            "yarn" { & yarn install }
            "npm" { & npm install }
        }
        Write-Success "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
    } catch {
        Write-Error "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $($_.Exception.Message)"
        exit 1
    }
}

function Set-ProductionConfig {
    Write-Info "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Production mode..."
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á .env.local ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production
    $envContent = @"

# HMR Production Configuration
NEXT_TELEMETRY_DISABLED=1
DISABLE_HMR_LOGS=true
FAST_REFRESH=false
NODE_ENV=production
"@

    $envFile = ".\.env.local"
    if (Test-Path $envFile) {
        $existingContent = Get-Content $envFile -Raw
        if (-not $existingContent.Contains("DISABLE_HMR_LOGS")) {
            Add-Content $envFile $envContent
        }
    } else {
        Set-Content $envFile $envContent
    }
    
    Write-Success "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Production configuration ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
    Write-Info "HMR logs ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î production"
}

function Set-DevelopmentConfig {
    Write-Info "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Development mode..."
    
    # ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ production ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å .env.local
    $envFile = ".\.env.local"
    if (Test-Path $envFile) {
        $content = Get-Content $envFile | Where-Object { 
            $_ -notmatch "DISABLE_HMR_LOGS|FAST_REFRESH=false|NODE_ENV=production" 
        }
        Set-Content $envFile $content
    }
    
    Write-Success "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Development configuration ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
    Write-Info "HMR ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î development"
}

function Start-DevServer {
    $packageManager = Get-PackageManager
    Write-Info "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô development server..."
    
    try {
        switch ($packageManager) {
            "pnpm" { 
                Write-Success "üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏° dev server ‡∏î‡πâ‡∏ß‡∏¢ pnpm..."
                & pnpm dev 
            }
            "yarn" { 
                Write-Success "üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏° dev server ‡∏î‡πâ‡∏ß‡∏¢ yarn..."
                & yarn dev 
            }
            "npm" { 
                Write-Success "üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏° dev server ‡∏î‡πâ‡∏ß‡∏¢ npm..."
                & npm run dev 
            }
        }
    } catch {
        Write-Error "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° dev server ‡πÑ‡∏î‡πâ: $($_.Exception.Message)"
        Write-Info "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á: $packageManager dev"
    }
}

function Create-HMRConfig {
    $configContent = @"
{
  "development": {
    "webpackHMR": true,
    "refreshOnUpdate": true,
    "websocketUrl": "ws://localhost:3000/_next/webpack-hmr",
    "retryAttempts": 3,
    "retryDelay": 1000
  },
  "production": {
    "webpackHMR": false,
    "refreshOnUpdate": false,
    "websocketUrl": null,
    "disableLogs": true
  }
}
"@

    Set-Content "hmr.config.json" $configContent
    Write-Success "‡∏™‡∏£‡πâ‡∏≤‡∏á HMR configuration file ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
}

# Main execution
Write-ColoredText "`nüîß WebSocket HMR Fix Tool - ‡∏Ñ‡∏£‡∏π‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏ñ‡∏™‡∏ß‡∏¢" "Magenta"
Write-Info "Project directory: $(Get-Location)"

if ($Help) {
    Show-Help
}

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Next.js project ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if (-not (Test-Path "next.config.js")) {
    Write-Error "‡πÑ‡∏°‡πà‡∏û‡∏ö next.config.js - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Next.js project"
    exit 1
}

# ‡∏™‡∏£‡πâ‡∏≤‡∏á HMR config file
Create-HMRConfig

if ($Reset) {
    Write-Info "üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Next.js development environment..."
    Remove-NextDirectory
    Clear-PackageCache
    Install-Dependencies
    Set-DevelopmentConfig
    Write-Success "üéâ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!"
    
    $response = Read-Host "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° dev server ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/N)"
    if ($response -eq "y" -or $response -eq "Y") {
        Start-DevServer
    }
} elseif ($Production) {
    Write-Info "üì¶ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Production mode..."
    Set-ProductionConfig
    Write-Success "‚úÖ Production configuration ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"
} elseif ($Development) {
    Write-Info "üõ†Ô∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Development mode..."
    Set-DevelopmentConfig
    Write-Success "‚úÖ Development configuration ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"
    
    $response = Read-Host "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° dev server ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/N)"
    if ($response -eq "y" -or $response -eq "Y") {
        Start-DevServer
    }
} else {
    # Default: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö NODE_ENV ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
    $nodeEnv = $env:NODE_ENV
    
    if ($nodeEnv -eq "production") {
        Write-Info "‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö Production environment"
        Set-ProductionConfig
    } else {
        Write-Info "‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö Development environment (‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î)"
        Set-DevelopmentConfig
        
        $response = Read-Host "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏° dev server ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/N)"
        if ($response -eq "y" -or $response -eq "Y") {
            Remove-NextDirectory
            Clear-PackageCache
            Install-Dependencies
            Start-DevServer
        }
    }
}

Write-ColoredText "`nüéâ WebSocket HMR Fix ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!" "Green"
Write-Info "‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ HMR ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:"
Write-Host "  1. Firewall ‡∏ó‡∏µ‡πà‡∏û‡∏≠‡∏£‡πå‡∏ï 3000"
Write-Host "  2. Proxy configuration ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö /_next/webpack-hmr"
Write-Host "  3. WebSocket support ‡πÉ‡∏ô reverse proxy"