# ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢)
# All-in-One Development Environment Manager
# Created: August 27, 2025

param(
    [ValidateSet("close", "restore", "menu", "setup")]
    [string]$Action = "menu"
)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ process ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏õ‡∏¥‡∏î
$PROCESSES_TO_CLOSE = @(
    "msedge", "firefox", "opera", "brave",
    "Teams", "Slack", "Discord", "WhatsApp", "Telegram Desktop", "Signal", "Zoom", "Skype",
    "Spotify", "vlc", "foobar2000", "iTunes", "MusicBee", "AIMP",
    "Steam", "EpicGamesLauncher", "Battle.net", "Origin", "Uplay", "GOGGalaxy",
    "OneDrive", "Dropbox", "GoogleDriveFS", "Box", "pCloud",
    "obs64", "obs32", "OBS", "XSplit", "Streamlabs OBS", "Bandicam", "Camtasia",
    "WINWORD", "EXCEL", "POWERPNT", "OUTLOOK", "ONENOTE",
    "Photoshop", "Illustrator", "InDesign", "Premiere Pro", "After Effects",
    "uTorrent", "BitTorrent", "qBittorrent", "IDM",
    "Notepad++", "7zFM", "WinRAR", "TeamViewer", "AnyDesk", "calculator"
)

function Close-NonDevApps {
    Write-Host "üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤..." -ForegroundColor Yellow
    Write-Host "üí° ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î: VS Code, Node.js, Git, Python, Google Chrome" -ForegroundColor Green
    
    $closedProcesses = @()
    
    foreach ($processName in $PROCESSES_TO_CLOSE) {
        try {
            $processes = Get-Process -Name $processName -ErrorAction SilentlyContinue
            if ($processes) {
                foreach ($process in $processes) {
                    $processInfo = @{
                        Name = $process.ProcessName
                        Path = $process.Path
                        StartTime = $process.StartTime
                    }
                    $closedProcesses += $processInfo
                    
                    Write-Host "‚ùå ‡∏õ‡∏¥‡∏î: $($process.ProcessName) (PID: $($process.Id))" -ForegroundColor Red
                    $process.Kill()
                }
            }
        }
        catch {
            # ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á error ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö process ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ
        }
    }
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    $dataPath = "$env:TEMP\dev-closed-apps.json"
    $closedProcesses | ConvertTo-Json -Depth 3 | Out-File -FilePath $dataPath -Encoding UTF8
    
    Write-Host "`n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏õ‡∏¥‡∏î $($closedProcesses.Count) processes" -ForegroundColor Green
    Write-Host "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏µ‡πà: $dataPath" -ForegroundColor Cyan
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
    $memory = Get-WmiObject -Class Win32_OperatingSystem
    $freeMemory = [math]::Round($memory.FreePhysicalMemory/1MB, 2)
    Write-Host "üíæ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏ß‡πà‡∏≤‡∏á: $freeMemory GB" -ForegroundColor Magenta
}

function Restore-Apps {
    Write-Host "üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô..." -ForegroundColor Yellow
    
    $dataPath = "$env:TEMP\dev-closed-apps.json"
    
    if (-not (Test-Path $dataPath)) {
        Write-Host "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• process ‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÑ‡∏õ" -ForegroundColor Red
        Write-Host "üí° ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏Å‡πà‡∏≠‡∏ô" -ForegroundColor Yellow
        return
    }
    
    try {
        $closedProcesses = Get-Content $dataPath | ConvertFrom-Json
        
        if (-not $closedProcesses -or $closedProcesses.Count -eq 0) {
            Write-Host "üìù ‡πÑ‡∏°‡πà‡∏°‡∏µ process ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô" -ForegroundColor Green
            return
        }
        
        Write-Host "üìã ‡∏û‡∏ö $($closedProcesses.Count) ‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô" -ForegroundColor Cyan
        
        $restored = 0
        $failed = 0
        
        foreach ($processInfo in $closedProcesses) {
            try {
                if ($processInfo.Path -and (Test-Path $processInfo.Path)) {
                    Write-Host "‚ñ∂Ô∏è ‡πÄ‡∏õ‡∏¥‡∏î: $($processInfo.Name)" -ForegroundColor Green
                    Start-Process $processInfo.Path -ErrorAction SilentlyContinue
                    $restored++
                    Start-Sleep -Milliseconds 500
                }
                else {
                    Write-Host "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: $($processInfo.Name)" -ForegroundColor Yellow
                    $failed++
                }
            }
            catch {
                Write-Host "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î: $($processInfo.Name)" -ForegroundColor Red
                $failed++
            }
        }
        
        Write-Host "`n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $restored ‡πÅ‡∏≠‡∏õ, ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: $failed ‡πÅ‡∏≠‡∏õ" -ForegroundColor Green
        
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        Remove-Item $dataPath -Force -ErrorAction SilentlyContinue
        
    }
    catch {
        Write-Host "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $($_.Exception.Message)" -ForegroundColor Red
    }
}

function Setup-AutoRestore {
    Write-Host "‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á..." -ForegroundColor Yellow
    
    $startupFolder = [Environment]::GetFolderPath("Startup")
    $shortcutPath = "$startupFolder\DevAppsRestore.lnk"
    
    $WScriptShell = New-Object -ComObject WScript.Shell
    $Shortcut = $WScriptShell.CreateShortcut($shortcutPath)
    $Shortcut.TargetPath = "powershell.exe"
    $Shortcut.Arguments = "-WindowStyle Hidden -ExecutionPolicy Bypass -Command `"& '$PSCommandPath' -Action restore`""
    $Shortcut.Description = "‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
    $Shortcut.Save()
    
    Write-Host "‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó" -ForegroundColor Green
}

function Show-Menu {
    Clear-Host
    Write-Host "=============================================================" -ForegroundColor Cyan
    Write-Host "üöÄ ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤" -ForegroundColor Yellow
    Write-Host "=============================================================" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "1. üî¥ ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤" -ForegroundColor Red
    Write-Host "2. üîÑ ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô" -ForegroundColor Green
    Write-Host "3. ‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó" -ForegroundColor Yellow
    Write-Host "4. üíæ ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥" -ForegroundColor Magenta
    Write-Host "5. üö™ ‡∏≠‡∏≠‡∏Å" -ForegroundColor Gray
    Write-Host ""
    Write-Host "=============================================================" -ForegroundColor Cyan
}

function Show-MemoryUsage {
    $memory = Get-WmiObject -Class Win32_OperatingSystem
    $totalMemory = [math]::Round($memory.TotalVisibleMemorySize / 1MB, 2)
    $freeMemory = [math]::Round($memory.FreePhysicalMemory / 1MB, 2)
    $usedMemory = $totalMemory - $freeMemory
    $usagePercent = [math]::Round(($usedMemory / $totalMemory) * 100, 1)
    
    Write-Host "üíæ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥:" -ForegroundColor Magenta
    Write-Host "   ‡∏£‡∏ß‡∏°: $totalMemory GB" -ForegroundColor White
    Write-Host "   ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß: $usedMemory GB ($usagePercent%)" -ForegroundColor Yellow
    Write-Host "   ‡∏ß‡πà‡∏≤‡∏á: $freeMemory GB" -ForegroundColor Green
}

# ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
switch ($Action) {
    "close" {
        Close-NonDevApps
        pause
        exit
    }
    "restore" {
        Restore-Apps
        if ($env:SESSIONNAME -eq "Console") { pause }  # pause ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö interactive
        exit
    }
    "setup" {
        Setup-AutoRestore
        pause
        exit
    }
    "menu" {
        do {
            Show-Menu
            $choice = Read-Host "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ (1-5)"
            
            switch ($choice) {
                "1" {
                    Close-NonDevApps
                    Write-Host "`n‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏°‡∏ô‡∏π..." -ForegroundColor Yellow
                    Read-Host
                }
                "2" {
                    Restore-Apps
                    Write-Host "`n‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏°‡∏ô‡∏π..." -ForegroundColor Yellow
                    Read-Host
                }
                "3" {
                    Setup-AutoRestore
                    Write-Host "`n‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏°‡∏ô‡∏π..." -ForegroundColor Yellow
                    Read-Host
                }
                "4" {
                    Show-MemoryUsage
                    Write-Host "`n‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏°‡∏ô‡∏π..." -ForegroundColor Yellow
                    Read-Host
                }
                "5" {
                    Write-Host "üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£!" -ForegroundColor Green
                    exit
                }
                default {
                    Write-Host "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1-5 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô" -ForegroundColor Red
                    Start-Sleep -Seconds 2
                }
            }
        } while ($choice -ne "5")
    }
}
